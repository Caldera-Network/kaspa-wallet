"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UtxoSet = void 0;
// @ts-ignore
const bitcore_lib_cash_1 = require("bitcore-lib-cash");
const logger_1 = require("../utils/logger");
class UtxoSet {
    constructor() {
        this.utxos = {};
        this.inUse = [];
        this.totalBalance = 0;
        this.availableBalance = 0;
        this.utxoStorage = {};
    }
    get length() {
        return Object.keys(this.utxos).length;
    }
    /**
     * Add UTXOs to UTXO set.
     * @param utxos Array of UTXOs from kaspa API.
     * @param address Address of UTXO owner.
     */
    add(utxos, address) {
        const utxoIds = [];
        utxos.forEach((utxo) => {
            const utxoId = utxo.transactionId + utxo.index.toString();
            const utxoInUse = this.inUse.indexOf(utxoId) !== -1;
            const alreadyHaveIt = this.utxos[utxoId];
            if (!utxoInUse && !alreadyHaveIt && utxo.isSpendable) {
                utxoIds.push(utxoId);
                this.utxos[utxoId] = new bitcore_lib_cash_1.default.Transaction.UnspentOutput({
                    txid: utxo.transactionId,
                    address,
                    vout: utxo.index,
                    scriptPubKey: utxo.scriptPubKey,
                    satoshis: utxo.value,
                });
            }
        });
        if (utxoIds.length) {
            logger_1.logger.log('info', `Added ${utxoIds.length} UTXOs to UtxoSet.`);
            // this.updateUtxoBalance();
        }
        return utxoIds;
    }
    remove(utxoIds) {
        this.release(utxoIds);
        utxoIds.forEach((id) => delete this.utxos[id]);
    }
    release(utxoIdsToEnable) {
        // assigns new array without any utxoIdsToEnable
        this.inUse = this.inUse.filter((utxoId) => utxoIdsToEnable.indexOf(utxoId) === -1);
        // this.updateUtxoBalance();
    }
    updateUtxoBalance() {
        const utxoIds = Object.keys(this.utxos);
        const utxoIdsNotInUse = utxoIds.filter((key) => this.inUse.indexOf(key) === -1);
        this.totalBalance = utxoIds.reduce((prev, cur) => prev + this.utxos[cur].satoshis, 0);
        this.availableBalance = utxoIdsNotInUse.reduce((prev, cur) => prev + this.utxos[cur].satoshis, 0);
    }
    clear() {
        this.utxos = {};
        this.inUse = [];
        this.availableBalance = 0;
        logger_1.logger.log('info', 'UTXO set cleared.');
    }
    /**
     * Naively select UTXOs.
     * @param txAmount Provide the amount that the UTXOs should cover.
     * @throws Error message if the UTXOs can't cover the `txAmount`
     */
    selectUtxos(txAmount) {
        const utxos = [];
        const utxoIds = [];
        let totalVal = 0;
        for (const [utxoId, utxo] of Object.entries(this.utxos)) {
            if (this.inUse.indexOf(utxoId) === -1) {
                utxoIds.push(utxoId);
                utxos.push(utxo);
                totalVal += utxo.satoshis;
            }
            if (totalVal >= txAmount)
                break;
        }
        if (totalVal < txAmount)
            throw new Error(`Transaction compose error. Need: ${txAmount}, UTXO Balance: ${totalVal}`);
        return { utxoIds, utxos };
    }
}
exports.UtxoSet = UtxoSet;
//# sourceMappingURL=data:application/json;base64,