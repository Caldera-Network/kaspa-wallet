export const txParser = (transactionStorage, addressArray) => {
    const keyedTx = Object.values(transactionStorage)
        .flat()
        .reduce((map, val) => {
        map[val.transactionId] = val;
        return map;
    }, {});
    const dedupedTx = Object.values(keyedTx);
    const parsedTxs = dedupedTx.map((tx) => {
        const hasNoInputs = tx.inputs.length === 0;
        const controlsAllInputs = tx.inputs
            .map((input) => input.address)
            .every((address) => addressArray.includes(address));
        if (hasNoInputs) {
            tx.summary = {
                direction: 'in',
                value: tx.outputs.reduce((prev, cur) => prev + cur.value, 0),
                address: 'mined',
            };
        }
        else if (controlsAllInputs) {
            tx.summary = {
                direction: 'out',
                value: tx.outputs.reduce((prev, cur) => {
                    const value = addressArray.includes(cur.address) ? 0 : cur.value;
                    return prev + value;
                }, 0),
                address: tx.outputs[0].address,
            };
        }
        else if (!controlsAllInputs) {
            tx.summary = {
                direction: 'in',
                value: tx.outputs.reduce((prev, cur) => {
                    const value = addressArray.includes(cur.address) ? cur.value : 0;
                    return prev + value;
                }, 0),
                address: tx.inputs[0].address,
            };
        }
        else {
            throw new Error(`Can't determine transaction metadata:\n${JSON.stringify(tx)}`);
        }
        return tx;
    });
    return parsedTxs;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHhQYXJzZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi93YWxsZXQvdHhQYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBU0EsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQ3RCLGtCQUFxRCxFQUNyRCxZQUFzQixFQUNaLEVBQUU7SUFDWixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDO1NBQzlDLElBQUksRUFBRTtTQUNOLE1BQU0sQ0FBQyxDQUFDLEdBQTJCLEVBQUUsR0FBVyxFQUFFLEVBQUU7UUFDbkQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDN0IsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDVCxNQUFNLFNBQVMsR0FBYSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtRQUNyQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7UUFDM0MsTUFBTSxpQkFBaUIsR0FBRyxFQUFFLENBQUMsTUFBTTthQUNoQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7YUFDN0IsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDdEQsSUFBSSxXQUFXLEVBQUU7WUFDZixFQUFFLENBQUMsT0FBTyxHQUFHO2dCQUNYLFNBQVMsRUFBRSxJQUFJO2dCQUNmLEtBQUssRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztnQkFDNUQsT0FBTyxFQUFFLE9BQU87YUFDakIsQ0FBQztTQUNIO2FBQU0sSUFBSSxpQkFBaUIsRUFBRTtZQUM1QixFQUFFLENBQUMsT0FBTyxHQUFHO2dCQUNYLFNBQVMsRUFBRSxLQUFLO2dCQUNoQixLQUFLLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUU7b0JBQ3JDLE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7b0JBQ2pFLE9BQU8sSUFBSSxHQUFHLEtBQUssQ0FBQztnQkFDdEIsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDTCxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPO2FBQy9CLENBQUM7U0FDSDthQUFNLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUM3QixFQUFFLENBQUMsT0FBTyxHQUFHO2dCQUNYLFNBQVMsRUFBRSxJQUFJO2dCQUNmLEtBQUssRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtvQkFDckMsTUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDakUsT0FBTyxJQUFJLEdBQUcsS0FBSyxDQUFDO2dCQUN0QixDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNMLE9BQU8sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU87YUFDOUIsQ0FBQztTQUNIO2FBQU07WUFDTCxNQUFNLElBQUksS0FBSyxDQUFDLDBDQUEwQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNqRjtRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcGkgfSBmcm9tICdjdXN0b20tdHlwZXMnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5pbnRlcmZhY2UgTmljZVR4IGV4dGVuZHMgQXBpLlRyYW5zYWN0aW9uIHtcbiAgc3VtbWFyeT86IHtcbiAgICBkaXJlY3Rpb24/OiAnaW4nIHwgJ291dCc7XG4gICAgYWRkcmVzcz86IHN0cmluZztcbiAgICB2YWx1ZT86IG51bWJlcjtcbiAgfTtcbn1cbmV4cG9ydCBjb25zdCB0eFBhcnNlciA9IChcbiAgdHJhbnNhY3Rpb25TdG9yYWdlOiBSZWNvcmQ8c3RyaW5nLCBBcGkuVHJhbnNhY3Rpb25bXT4sXG4gIGFkZHJlc3NBcnJheTogc3RyaW5nW11cbik6IE5pY2VUeFtdID0+IHtcbiAgY29uc3Qga2V5ZWRUeCA9IE9iamVjdC52YWx1ZXModHJhbnNhY3Rpb25TdG9yYWdlKVxuICAgIC5mbGF0KClcbiAgICAucmVkdWNlKChtYXA6IFJlY29yZDxzdHJpbmcsIE5pY2VUeD4sIHZhbDogTmljZVR4KSA9PiB7XG4gICAgICBtYXBbdmFsLnRyYW5zYWN0aW9uSWRdID0gdmFsO1xuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9LCB7fSk7XG4gIGNvbnN0IGRlZHVwZWRUeDogTmljZVR4W10gPSBPYmplY3QudmFsdWVzKGtleWVkVHgpO1xuICBjb25zdCBwYXJzZWRUeHMgPSBkZWR1cGVkVHgubWFwKCh0eCkgPT4ge1xuICAgIGNvbnN0IGhhc05vSW5wdXRzID0gdHguaW5wdXRzLmxlbmd0aCA9PT0gMDtcbiAgICBjb25zdCBjb250cm9sc0FsbElucHV0cyA9IHR4LmlucHV0c1xuICAgICAgLm1hcCgoaW5wdXQpID0+IGlucHV0LmFkZHJlc3MpXG4gICAgICAuZXZlcnkoKGFkZHJlc3MpID0+IGFkZHJlc3NBcnJheS5pbmNsdWRlcyhhZGRyZXNzKSk7XG4gICAgaWYgKGhhc05vSW5wdXRzKSB7XG4gICAgICB0eC5zdW1tYXJ5ID0ge1xuICAgICAgICBkaXJlY3Rpb246ICdpbicsXG4gICAgICAgIHZhbHVlOiB0eC5vdXRwdXRzLnJlZHVjZSgocHJldiwgY3VyKSA9PiBwcmV2ICsgY3VyLnZhbHVlLCAwKSxcbiAgICAgICAgYWRkcmVzczogJ21pbmVkJyxcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChjb250cm9sc0FsbElucHV0cykge1xuICAgICAgdHguc3VtbWFyeSA9IHtcbiAgICAgICAgZGlyZWN0aW9uOiAnb3V0JyxcbiAgICAgICAgdmFsdWU6IHR4Lm91dHB1dHMucmVkdWNlKChwcmV2LCBjdXIpID0+IHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGFkZHJlc3NBcnJheS5pbmNsdWRlcyhjdXIuYWRkcmVzcykgPyAwIDogY3VyLnZhbHVlO1xuICAgICAgICAgIHJldHVybiBwcmV2ICsgdmFsdWU7XG4gICAgICAgIH0sIDApLFxuICAgICAgICBhZGRyZXNzOiB0eC5vdXRwdXRzWzBdLmFkZHJlc3MsXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoIWNvbnRyb2xzQWxsSW5wdXRzKSB7XG4gICAgICB0eC5zdW1tYXJ5ID0ge1xuICAgICAgICBkaXJlY3Rpb246ICdpbicsXG4gICAgICAgIHZhbHVlOiB0eC5vdXRwdXRzLnJlZHVjZSgocHJldiwgY3VyKSA9PiB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBhZGRyZXNzQXJyYXkuaW5jbHVkZXMoY3VyLmFkZHJlc3MpID8gY3VyLnZhbHVlIDogMDtcbiAgICAgICAgICByZXR1cm4gcHJldiArIHZhbHVlO1xuICAgICAgICB9LCAwKSxcbiAgICAgICAgYWRkcmVzczogdHguaW5wdXRzWzBdLmFkZHJlc3MsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGRldGVybWluZSB0cmFuc2FjdGlvbiBtZXRhZGF0YTpcXG4ke0pTT04uc3RyaW5naWZ5KHR4KX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHR4O1xuICB9KTtcbiAgcmV0dXJuIHBhcnNlZFR4cztcbn07XG4iXX0=