"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.txParser = void 0;
exports.txParser = (transactionStorage, addressArray) => {
    const keyedTx = Object.values(transactionStorage)
        .flat()
        .reduce((map, val) => {
        map[val.transactionId] = val;
        return map;
    }, {});
    const dedupedTx = Object.values(keyedTx);
    const parsedTxs = dedupedTx.map((tx) => {
        const hasNoInputs = tx.inputs.length === 0;
        const controlsAllInputs = tx.inputs
            .map((input) => input.address)
            .every((address) => addressArray.includes(address));
        if (hasNoInputs) {
            tx.summary = {
                direction: 'in',
                value: tx.outputs.reduce((prev, cur) => prev + cur.value, 0),
                address: 'mined',
            };
        }
        else if (controlsAllInputs) {
            tx.summary = {
                direction: 'out',
                value: tx.outputs.reduce((prev, cur) => {
                    const value = addressArray.includes(cur.address) ? 0 : cur.value;
                    return prev + value;
                }, 0),
                address: tx.outputs[0].address,
            };
        }
        else if (!controlsAllInputs) {
            tx.summary = {
                direction: 'in',
                value: tx.outputs.reduce((prev, cur) => {
                    const value = addressArray.includes(cur.address) ? cur.value : 0;
                    return prev + value;
                }, 0),
                address: tx.inputs[0].address,
            };
        }
        else {
            throw new Error(`Can't determine transaction metadata:\n${JSON.stringify(tx)}`);
        }
        return tx;
    });
    return parsedTxs;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHhQYXJzZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi93YWxsZXQvdHhQYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBU2EsUUFBQSxRQUFRLEdBQUcsQ0FDdEIsa0JBQXFELEVBQ3JELFlBQXNCLEVBQ1osRUFBRTtJQUNaLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUM7U0FDOUMsSUFBSSxFQUFFO1NBQ04sTUFBTSxDQUFDLENBQUMsR0FBMkIsRUFBRSxHQUFXLEVBQUUsRUFBRTtRQUNuRCxHQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUM3QixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNULE1BQU0sU0FBUyxHQUFhLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkQsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO1FBQ3JDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztRQUMzQyxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxNQUFNO2FBQ2hDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQzthQUM3QixLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLFdBQVcsRUFBRTtZQUNmLEVBQUUsQ0FBQyxPQUFPLEdBQUc7Z0JBQ1gsU0FBUyxFQUFFLElBQUk7Z0JBQ2YsS0FBSyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUM1RCxPQUFPLEVBQUUsT0FBTzthQUNqQixDQUFDO1NBQ0g7YUFBTSxJQUFJLGlCQUFpQixFQUFFO1lBQzVCLEVBQUUsQ0FBQyxPQUFPLEdBQUc7Z0JBQ1gsU0FBUyxFQUFFLEtBQUs7Z0JBQ2hCLEtBQUssRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtvQkFDckMsTUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztvQkFDakUsT0FBTyxJQUFJLEdBQUcsS0FBSyxDQUFDO2dCQUN0QixDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNMLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU87YUFDL0IsQ0FBQztTQUNIO2FBQU0sSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQzdCLEVBQUUsQ0FBQyxPQUFPLEdBQUc7Z0JBQ1gsU0FBUyxFQUFFLElBQUk7Z0JBQ2YsS0FBSyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO29CQUNyQyxNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNqRSxPQUFPLElBQUksR0FBRyxLQUFLLENBQUM7Z0JBQ3RCLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ0wsT0FBTyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTzthQUM5QixDQUFDO1NBQ0g7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsMENBQTBDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2pGO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwaSB9IGZyb20gJ2N1c3RvbS10eXBlcyc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmludGVyZmFjZSBOaWNlVHggZXh0ZW5kcyBBcGkuVHJhbnNhY3Rpb24ge1xuICBzdW1tYXJ5Pzoge1xuICAgIGRpcmVjdGlvbj86ICdpbicgfCAnb3V0JztcbiAgICBhZGRyZXNzPzogc3RyaW5nO1xuICAgIHZhbHVlPzogbnVtYmVyO1xuICB9O1xufVxuZXhwb3J0IGNvbnN0IHR4UGFyc2VyID0gKFxuICB0cmFuc2FjdGlvblN0b3JhZ2U6IFJlY29yZDxzdHJpbmcsIEFwaS5UcmFuc2FjdGlvbltdPixcbiAgYWRkcmVzc0FycmF5OiBzdHJpbmdbXVxuKTogTmljZVR4W10gPT4ge1xuICBjb25zdCBrZXllZFR4ID0gT2JqZWN0LnZhbHVlcyh0cmFuc2FjdGlvblN0b3JhZ2UpXG4gICAgLmZsYXQoKVxuICAgIC5yZWR1Y2UoKG1hcDogUmVjb3JkPHN0cmluZywgTmljZVR4PiwgdmFsOiBOaWNlVHgpID0+IHtcbiAgICAgIG1hcFt2YWwudHJhbnNhY3Rpb25JZF0gPSB2YWw7XG4gICAgICByZXR1cm4gbWFwO1xuICAgIH0sIHt9KTtcbiAgY29uc3QgZGVkdXBlZFR4OiBOaWNlVHhbXSA9IE9iamVjdC52YWx1ZXMoa2V5ZWRUeCk7XG4gIGNvbnN0IHBhcnNlZFR4cyA9IGRlZHVwZWRUeC5tYXAoKHR4KSA9PiB7XG4gICAgY29uc3QgaGFzTm9JbnB1dHMgPSB0eC5pbnB1dHMubGVuZ3RoID09PSAwO1xuICAgIGNvbnN0IGNvbnRyb2xzQWxsSW5wdXRzID0gdHguaW5wdXRzXG4gICAgICAubWFwKChpbnB1dCkgPT4gaW5wdXQuYWRkcmVzcylcbiAgICAgIC5ldmVyeSgoYWRkcmVzcykgPT4gYWRkcmVzc0FycmF5LmluY2x1ZGVzKGFkZHJlc3MpKTtcbiAgICBpZiAoaGFzTm9JbnB1dHMpIHtcbiAgICAgIHR4LnN1bW1hcnkgPSB7XG4gICAgICAgIGRpcmVjdGlvbjogJ2luJyxcbiAgICAgICAgdmFsdWU6IHR4Lm91dHB1dHMucmVkdWNlKChwcmV2LCBjdXIpID0+IHByZXYgKyBjdXIudmFsdWUsIDApLFxuICAgICAgICBhZGRyZXNzOiAnbWluZWQnLFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGNvbnRyb2xzQWxsSW5wdXRzKSB7XG4gICAgICB0eC5zdW1tYXJ5ID0ge1xuICAgICAgICBkaXJlY3Rpb246ICdvdXQnLFxuICAgICAgICB2YWx1ZTogdHgub3V0cHV0cy5yZWR1Y2UoKHByZXYsIGN1cikgPT4ge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gYWRkcmVzc0FycmF5LmluY2x1ZGVzKGN1ci5hZGRyZXNzKSA/IDAgOiBjdXIudmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHByZXYgKyB2YWx1ZTtcbiAgICAgICAgfSwgMCksXG4gICAgICAgIGFkZHJlc3M6IHR4Lm91dHB1dHNbMF0uYWRkcmVzcyxcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICghY29udHJvbHNBbGxJbnB1dHMpIHtcbiAgICAgIHR4LnN1bW1hcnkgPSB7XG4gICAgICAgIGRpcmVjdGlvbjogJ2luJyxcbiAgICAgICAgdmFsdWU6IHR4Lm91dHB1dHMucmVkdWNlKChwcmV2LCBjdXIpID0+IHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGFkZHJlc3NBcnJheS5pbmNsdWRlcyhjdXIuYWRkcmVzcykgPyBjdXIudmFsdWUgOiAwO1xuICAgICAgICAgIHJldHVybiBwcmV2ICsgdmFsdWU7XG4gICAgICAgIH0sIDApLFxuICAgICAgICBhZGRyZXNzOiB0eC5pbnB1dHNbMF0uYWRkcmVzcyxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgZGV0ZXJtaW5lIHRyYW5zYWN0aW9uIG1ldGFkYXRhOlxcbiR7SlNPTi5zdHJpbmdpZnkodHgpfWApO1xuICAgIH1cbiAgICByZXR1cm4gdHg7XG4gIH0pO1xuICByZXR1cm4gcGFyc2VkVHhzO1xufTtcbiJdfQ==